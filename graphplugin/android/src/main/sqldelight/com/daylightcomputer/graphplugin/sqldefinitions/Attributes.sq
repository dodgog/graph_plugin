CREATE TABLE attributes (
    entity_id TEXT NOT NULL, -- for now means node
    attribute TEXT,
    value TEXT, -- for now string
    timestamp TEXT NOT NULL
);
-- TODO index for entity_id?

-- AIUSE gen ai help used
-- to have a conflict when inserting an attribute which already exists for an
-- entity
CREATE UNIQUE INDEX attributes_entity_id_attribute ON attributes(entity_id, attribute);

getAttributes:
SELECT * FROM attributes;

getAttributesForEntity:
SELECT * FROM attributes
WHERE entity_id = :entity_id;

upsertEventIntoAttributes{
UPDATE attributes
    SET value = :value,
        timestamp = :timestamp
    WHERE entity_id = :entity_id
      AND attribute = :attribute
      AND :timestamp > attributes.timestamp;

    -- If no rows were updated by the above (meaning either the row didn't exist,
    -- or it existed but the new timestamp wasn't greater), then try to insert.
    INSERT OR IGNORE INTO attributes (entity_id, attribute, value, timestamp)
    VALUES (
        :entity_id,
        :attribute,
        :value,
        :timestamp
    );
}

cleanAttributesTable:
DELETE FROM attributes;

insertAllEventsIntoAttributes:
-- Use INSERT OR REPLACE to handle conflicts with the unique index on (entity_id, attribute)
INSERT OR REPLACE INTO attributes (entity_id, attribute, value, timestamp)
-- Select only the latest events that should become attributes
SELECT e1.entity_id, e1.attribute, e1.value, e1.timestamp
FROM events e1
-- Self-join to find any newer events for the same entity/attribute pair
-- If a newer event exists, e2 will have a value; if this is the newest event, e2 will be NULL
LEFT OUTER JOIN events e2 ON
  e1.entity_id = e2.entity_id AND
  e1.attribute = e2.attribute AND
  e2.timestamp > e1.timestamp
-- Only select events where:
-- 1. This is the newest event (no newer events exist in e2)
WHERE e2.entity_id IS NULL
-- 2. And there isn't already a newer value in the attributes table
AND NOT EXISTS (
  SELECT 1 FROM attributes a
  WHERE a.entity_id = e1.entity_id
  AND a.attribute = e1.attribute
  AND a.timestamp > e1.timestamp
);

